voxilent

to get started in game dev, i had to start simple. And thats how it started, a simple clicker. 
The idea was cookie clicker with many different resources ytoo click (wood, stone etc.) then once you had, say, 8 stone a furnace resource would appear with a connection to the stone resource. Clicking on that furnace would remove 8 stone and give you one furnace. So its a clicker with a slight complexity leap. And thats how it started...

But with passion and optimism comes hubris.

A new feature(tm)! "I know! How about instead of these resources already being present on the screen, you have to place them in a grid and draw the connections between them?". That certainly sounds more involved than your average clicker, but perhaps a good question would have been; what vakue does this bring? Of course that question didnt cross my mind. A genuis game creation awaited and rwason be damned! 16 features later and I had a factory building sim with upgrades, research, startegy and a spiffy plot to boot. I say 'had', what i really mean is I 'had' to make that. To the suprise of no one, the game sits half-finished, collecting dust. 

What I learnt; it goes without saying, plan out your solution before implementation, and secondly, find a method of coding solutions in a way that doesnt result in spagetti. Spaghetti? yes. A brief glace at the code for voxilent reveals a superb LACK of 'consistent structure', or as they are more commonly known, design patterns(tm).

Looking back now, i cringe at the horrific self-referential code, with overly dense classes created to solve less problems than they ended up causing, and nary a comment explaining any of this mess in sight. The lessons however, i would cherish, and after abandoning this mountainius task of a game the next project would surely be better.



Super Pixel Riders

A game actually finished! And thats the thing, about making a game, it takes time and preparation. For thjs project, i had a clear goal in mind, i wanted an action game with upfrades and unlockables. Areas of complexity:
1. the physics sandbox
2. the upgrade windows
3. level design and balance
4. art and assets
 The physics sandbox requires good pkayer control and combative AI, thamkfukky im not new to artificial intelligence and a finite state machine seemed like the obvious choice. 
 The upgrade windows would be a cursory exploration into UI design, nothing too complex. 
 Level design and balance would be the last thing in regards to development timescale.
Tge art and assets were created by my good friend who was himself looking to expand hjs creative horizons. Thanjs Ovi <3.


Crate Pusher

After creating a time-continuous game, now felt like a good time to get into a time-discrete environment, and what better start tgan a pizzle game. about pushing crates obviously. here levek design was the main probkem area. making the mostbof tge limitations yours game environment has to create chalkenging levels took a lot of trial and error. theres a difference between a problem thats hard and a problem thats challenging. mainky, not every hard probkem is challenging. if your solution requires endless trial and error, thats not challenging, tgats tediius. using the lessons yiu teach your pkayers from previous probkems in yiur fhture probkems is the key to rewarding gameplay.

Despite its apparent simplicity, this game taught me a lot about structuring yiur code. Those 'design patterns' i briefly mentioned in voxilent really started to appeal to me. Some observations; The observer pattern was all but cruicial in the physics of both SPR and CP, the singketon pattern was overused and misused in almost every project, the component pattern...

Additionally, data types and storage formats became of great significance. The proper separation of concerns for classes was a bigger priority than ever, and whikst the scale of each game was decreasing the structure of each was steadily improving.



Civ Helper

Not a game, but a tool for players of the boardgame civilization: a new dawn. here, usability was key. usually the ui is something i neglect as i prefer function over form, but i payed extra special attention to the grouping of certain elements and their interactions.



Breakout

Breakout was my first opportunity to teach someone all the lessons id learnt.



Genetics

Time for a simulation, genetic algorithms are a fun way to solve a problem. I enjoyed the idea of making a ui that woild allow you to alter the constants in real-time to see what i could find out.



Small Attempts

These are the many VERY unfinished projects i have 'in progress'. each one has taught me some lesson that i have carried forward with me.

